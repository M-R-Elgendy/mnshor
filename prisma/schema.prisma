// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum USER_TYPES {
  user
  admin
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  password           String
  role               USER_TYPES           @default(user)
  posts              Post[]
  CategoryPrefrances CategoryPrefrances[]
  File               File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, email])
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String?
  image       String?
  isPublished Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  userId      Int
  categoryId  Int
  User        User     @relation(fields: [userId], references: [id])
  Category    Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, userId, categoryId])
}

model Category {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  isDeleted          Boolean              @default(false)
  Post               Post[]
  CategoryPrefrances CategoryPrefrances[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model CategoryPrefrances {
  id Int @id @default(autoincrement())

  userId     Int
  categoryId Int
  rank       Int
  Category   Category @relation(fields: [categoryId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, userId, categoryId])
}

model File {
  id       Int    @id @default(autoincrement())
  type     String
  ETag     String
  Location String
  url      String
  key      String
  bucket   String

  User   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, url])
}
